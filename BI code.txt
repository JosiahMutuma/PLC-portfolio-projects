import sys
import re

sys.path.append('C:\\ProgramData\\anaconda3')
sys.path.append('C:\\Program Files\\Python311\\Scripts')
sys.path.append('C:\\Program Files\\Python311\\Lib\\site-packages')
sys.path.append('C:\\users\\laingo\\appdata\\roaming\\python\\python311\\site-packages')

#import pyautogui
import time
#from selenium import webdriver
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.alert import Alert
from selenium.webdriver.support.wait import WebDriverWait 

import undetected_chromedriver as uc

try:
    driver.get("https://www.bing.com/")
except:
    driver = uc.Chrome(version_main=113) #I will sometimes comment this section to disable it so as not to do endless bot restarts and code repeats
    pass

actionChains = ActionChains(driver)
wait = WebDriverWait(driver, 20) #Setting the max timeout for the webdriver wait
wait1 = WebDriverWait(driver, 5) #Setting a shorter timeout for checkboxes

def starting_uc_bot():
    alert = Alert(driver) 
    driver.maximize_window() 
    
def new_window():
    try:
        driver.switch_to.new_window('tab')
    except:
        pass
    
starting_uc_bot()
#driver.get("https://jobs.workable.com/view/qkRhwGB4tvfFiDyk27pn1a/remote-freelance-writer-in-united-states-at-stone-press") 
def readfiles():
    global content1,content2,content3,content4,content5
    with open(r"C:\Users\Laingo\Documents\Temp Word Documents\Python code\technical_writer_cover.txt", "r") as f1:
        content1 = (f1.read()) 
    with open(r"C:\Users\Laingo\Documents\Temp Word Documents\Python code\copywriter_cover.txt", "r") as f2:
        content2 = (f2.read())
    with open(r"C:\Users\Laingo\Documents\Temp Word Documents\Python code\technical_writer_cover(L).txt", "r") as f1:
        content3 = (f1.read()) 
    with open(r"C:\Users\Laingo\Documents\Temp Word Documents\Python code\copywriter_cover(L).txt", "r") as f2:
        content4 = (f2.read())
    with open(r"C:\Users\Laingo\Documents\Temp Word Documents\Python code\BOT_STORED_LINKS.txt", "r") as f1:
        content5 = (f1.read())
readfiles()    
    ##JOB LEVER APPLICATIONS CODE
def getting_job_desc():
    global job_type
    job_name = driver.find_element(By.TAG_NAME, 'body').text
    y = re.search('Technical', job_name) 
    if(y!=None):
        job_type = "technical_writer"
    driver.get("https://jobs.lever.co/wandb/37a6534f-553e-46da-a908-c2205cbe4c63/apply")
    job_desc = driver.find_element(By.CLASS_NAME, 'posting-categories').text
    print(job_desc)
    y = re.search('ON-SITE', job_desc) #sorting the link
    if(y!=None):
        status = "stop"
    x = re.search('HYBRID', job_desc) 
    x1 = re.search('REMOTE', job_desc)
    if(x!=None)&(x1==None):
        status = "stop"
        print(status)
        
def filling_in_form():
    try:
        name = driver.find_element(By.NAME, "name")
        sending_keysjs(name, 'Josiah Mutuma')
    except:
        pass
    try:
        email = driver.find_element(By.CSS_SELECTOR, "input[type=email]")
        sending_keysjs(email, 'josiahmutuma@gmail.com')
    except:
        pass
    try:
        phone_number = driver.find_element(By.NAME, "phone")
        sending_keysjs(phone_number, '+36703024930')
    except:
        pass
    ##ATTACHING RESUME
    try:
        if job_type == "technical_writer":
            driver.find_element(By.XPATH, '//*[@id="resume-upload-input"]').send_keys("C:\\Users\\Laingo\\Documents\\Temp Word Documents\\RESUMES\\Content writing\\Technical Writer CV.pdf")
    except:
        pass
    try:
        current_company = driver.find_element(By.NAME, "org")# urls[Portfolio]
        sending_keysjs(current_company, 'E9DIGITAL')
    except:
        pass
    try:
        linkedin = driver.find_element(By.CSS_SELECTOR, "input[name=urls[LinkedIn]][required]")
        sending_keysjs(linkedin, 'https://www.linkedin.com/in/josiah-mutuma-45aa34237/')
    except:
        pass
    try:
        portfolio_url = driver.find_element(By.NAME, "urls[Portfolio]")
        sending_keysjs(portfolio_url, 'Please click on this google docs with links of a sample of my published work:  https://docs.google.com/document/d/1p6diUrnzF6JMDdJAuz2xyEAR0SrM9eIqBEoBa10AlL0/edit#heading=h.pi4f9hc6tuie')
    except:
        pass
    try:        ##FILLING SALARY EXPECTATIONS
        elems = driver.find_elements(By.CLASS_NAME, 'application-question custom-question')
        for i in elems:
            elem_txt = i.text
            x = re.search('salary expectation', elem_txt)
            if(x!=None):
                input_box = i.find_element(By.CLASS_NAME, 'card-field-input')
                send_keysnojs(elem_txt, 'I am willing to accept your salary proposal Thanks :)')
                value = str(elem_txt.get_attribute("value"))
                z = len(re.findall(r'\w+', value))
                if (z==0)|(value==""):
                    elem_txt.clear()
                    send_keysnojs(elem_txt, '700')
                break
    except:
        pass
    try:     ##FILLING PORTFOLIO IN CUSTOM QUESTIONS
        elems = driver.find_elements(By.CLASS_NAME, 'application-question custom-question')
        for i in elems:
            elem_txt = i.text
            x = re.search('examples of work', elem_txt)
            x1 = re.search('portfolio', elem_txt) 
            x2 = re.search('published work', elem_txt) 
            if(x!=None | x1!=None | x2!=None):
                input_box = i.find_element(By.CLASS_NAME, 'card-field-input')
                sending_keysjs(input_box, 'Here is a google docs with links of a sample of my published work:  https://docs.google.com/document/d/1p6diUrnzF6JMDdJAuz2xyEAR0SrM9eIqBEoBa10AlL0/edit#heading=h.pi4f9hc6tuie')
                break
    except:
        pass
    try:         ## FILLING IN HOW DID YOU HEAR ABOUT US?
        elems = driver.find_elements(By.CLASS_NAME, 'application-question custom-question')
        for i in elems:
            elem_txt = i.text
            x = re.search('How did you hear about us', elem_txt) ##FILLING SALARY EXPECTATIONS
            if(x!=None):
                input_box = i.find_element(By.CLASS_NAME, 'card-field-input')
                sending_keysjs(input_box, 'bestwriting.com')
                break
    except:
        pass
                ##CLICKING THE PRONOUNS BOX
    try:
        pronouns = driver.find_element(By.ID, 'candidatePronounsCheckboxes')
        my_pronoun = pronouns.find_elements(By.XPATH, './/*')
        for i in my_pronoun:
            value = str(i.get_attribute("value"))
            y = re.search('He', value) #sorting the link
            if(y!=None):
                newclick(i)
                break
    except:
        pass
    try:
        ##SELECTING THE GENDER, RACE AND NAMES
        drpCountry = Select(driver.find_element(By.NAME,"eeo[gender]"))
        drpCountry.select_by_visible_text("Male")
        drpCountry = Select(driver.find_element(By.NAME,"eeo[race]"))
        drpCountry.select_by_visible_text("Black or African American (Not Hispanic or Latino)")
        drpCountry = Select(driver.find_element(By.NAME,"eeo[veteran]"))
        drpCountry.select_by_visible_text("I am not a veteran")
    except:
        pass
    ## FILLING 'ARE YOU AUTHORIZED TO WORK IN THE US'
    try:
        elems = driver.find_elements(By.CLASS_NAME, 'application-question custom-question')
        for i in elems:
            elem_txt = i.text
            x = re.search('you legally authorized to work', elem_txt) 
            if(x!=None):
                yes_button = i.find_element(By.CSS_SELECTOR, 'input[type=radio][value=Yes]') 
                newclick(yes_button)
                break
    except:
        pass
    ## FILLING 'WILL YOU REQUIRE SPONSORSHIP?'
    try:
        elems = driver.find_elements(By.CLASS_NAME, 'application-question custom-question')
        for i in elems:
            elem_txt = i.text
            x = re.search('sponsorship', elem_txt) 
            if(x!=None):
                no_button = i.find_element(By.CSS_SELECTOR, 'input[type=radio][value=No]') 
                newclick(no_button)
                break
    except:
        pass    
    ### FINALLY SUBMITTING THE FORM!!!!
    try:      
        submit_btn = driver.find_element(By.CSS_SELECTOR, "button[type=submit]")
        newclick(submit_btn)
    except:
        pass
    try:
        submit_btn1 = driver.find_element(By.ID, 'btn-submit')
        newclick(submit_btn1)
    except:
        pass

def job_lever_application():
    getting_job_desc()
    filling_in_form()
    
    ##WORKABLE APPLICATIONS CODE
def filling_in_the_form():
    def apply_btn1():
        try:
            apply_btn = wait.until(EC.element_to_be_clickable(driver.find_element(By.CSS_SELECTOR, 'button[data-ui=overview-apply-now]')))
            newclick(apply_btn)
        except:
            pass 
    
    apply_btn1()
    time.sleep(2)
    try:
        pass
    except:
        pass
    if job_type == "technical_writer":  ### must finish here and define job type as global
        resume = wait.until(EC.element_to_be_clickable(driver.find_element(By.CSS_SELECTOR, 'input[data-ui=resume]')))
        send_keysnojs(resume, resume_path)
        print('resume added')
        time.sleep(4)
    print(job_type)
    try:
        first_name = wait.until(EC.element_to_be_clickable(driver.find_element(By.ID, "firstname")))
        send_keysnojs(first_name, 'Josiah')
    except:
        pass
    try:
        last_name = driver.find_element(By.ID, "lastname")
        send_keysnojs(last_name, 'Mutuma')
    except:
        pass
    try:
        email = driver.find_element(By.ID, "email")
        send_keysnojs(email, 'josiahmutuma@gmail.com')
    except:
        pass
    try:   ##FILLING PHONE NUMBER AND COUNTRY CODE
        if (job_country!="uk"):
            ctry_list = driver.find_element(By.CLASS_NAME, 'iti__selected-flag')
            actionChains.move_to_element(ctry_list).perform()
            newclick(ctry_list)
            ctry_code = driver.find_element(By.ID, 'iti-0__item-us-preferred')
            newclick(ctry_code)
            phone_number = driver.find_element(By.NAME, "phone")
            send_keysnojs(phone_number, '5417543010')    
        if (job_country=="uk"):
            ctry_list = driver.find_element(By.CLASS_NAME, 'iti__selected-flag')
            actionChains.move_to_element(ctry_list).perform()
            newclick(ctry_list)
            ctry_code = driver.find_element(By.ID, 'iti-0__item-us-preferred')
            newclick(ctry_code)
            phone_number = driver.find_element(By.NAME, "phone")
            send_keysnojs(phone_number, '5417543010')
    except:
        pass
    try:
        address = driver.find_element(By.ID, 'address')
        send_keysnojs(address, '30 W. 26th Street New York') 
    except:
        pass
                ##FILLING CUSTOM QUESTIONS
    try:    
        ##Cover letter
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('over letter', question)
            if(x!=None):
                elem_txt = i.find_element(By.ID, 'cover_letter')
                send_keysnojs(elem_txt, cover_ltr)
                break
    except:
        pass
    try:    ## Tell us a bit about what you’re looking for in your next role!
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        txt1 = "In my next role, I'm looking to work for an organization that offers a collaborative and team-focused culture where I can learn from my colleagues and leaders to grow my writing skills. I decided to apply for this position because I knew that it was a good match for my skills. After researching your organization, I believe that your values align with mine, which is exciting. Finally, I am always seeking a role that helps me hone my writing skills, and therefore, I believe that this role fits me perfectly."
        for i in custom_q:
            question = i.text
            x = re.search('what you', question)
            x1 = re.search('looking', question)
            if(x!=None) & (x1!=None):
                elem_txt = i.find_element(By.TAG_NAME, 'textarea')
                send_keysnojs(elem_txt, txt1)
                break
    except:
        pass
    try:    ###FILLING THE STUPID HEADLINE REQUIREMENT....!!!vERY ANNOYING
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('Headline', question)  ##Headline 
            if(x!=None):
                elem_txt = i.find_element(By.CSS_SELECTOR, 'input[type=text][aria-required=true]')
                send_keysnojs(elem_txt, 'Job Application. ')
                break
    except:
        pass
    try:   ##Tell us a bit about what you’re looking for in your next role!
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        txt1 = "I decided to apply for this position because I knew that it was a good match for my skills. I am always seeking for a role that helps me to hone my writing skills and therefore I believe that this role fits me perfectly."
        for i in custom_q:
            question = i.text
            x = re.search('What', question)
            x1 = re.search('about this role', question)
            x2 = re.search('would be a good fit for you', question)
            if((x!=None) & (x1!=None)) | (x2!=None):
                elem_txt = i.find_element(By.TAG_NAME, 'textarea')
                send_keysnojs(elem_txt, txt1)
                break
    except:
        pass
    try:   ##What hesitations do you have regarding this role
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('hat hesitations do you have', question)
            if(x!=None):
                elem_txt = i.find_element(By.TAG_NAME, 'textarea')
                send_keysnojs(elem_txt, 'None. I believe that this role in your organization will me the best opportunity for me to grow in my writing career and add a meaningful impact in your organization')
                break
    except:
        pass
    try:    ##Would you be comfortable completing a paid test project
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('a paid test', question) 
            if(x!=None):
                elem_txt = i.find_element(By.TAG_NAME, 'textarea')
                send_keysnojs(elem_txt, 'Yes')
                break
    except:
        pass
    
    try: ###ADDING MY PORTFOLIO URLS!!!
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('portfolio', question) 
            x1 = re.search('sample', question)
            x2 = re.search('lease add', question)
            x3 = re.search('content', question)
            x4 = re.search('published', question)
            if(x!=None)|(x1!=None)|((x2!=None)&(x3!=None))|(x4!=None):
                try:
                    elem_txt = i.find_element(By.TAG_NAME, 'textarea')
                    send_keysnojs(elem_txt, 'Here is a google docs with links of samples of my published work:  https://docs.google.com/document/d/1p6diUrnzF6JMDdJAuz2xyEAR0SrM9eIqBEoBa10AlL0/edit#heading=h.pi4f9hc6tuie')
                except:
                    pass
                try:
                    txt_box = i.find_element(By.CSS_SELECTOR, 'input[aria-required=true][type=text]')
                    send_keysnojs(txt_box, 'Here is a google docs with links of samples of my published work:  https://docs.google.com/document/d/1p6diUrnzF6JMDdJAuz2xyEAR0SrM9eIqBEoBa10AlL0/edit#heading=h.pi4f9hc6tuie')
                except:
                    pass
                break
    except:
        pass
    try:
        ##CLICKING ON PHOTO
        photo = driver.find_element(CSS_SELECTOR, 'input[data-ui=avatar][type=file]')
        value = photo.get_attribute("aria-required")
        if (value!=None):
            photo.send_keys('C:\\Users\\Laingo\\Downloads\\me.jpg')
            time.sleep(1.5)
            upload = driver.find_element(By.CSS_SELECTOR, 'button[data-ui=crop-image][type=button]')
            newclick(upload)
            time.sleep(2)
    except:
        pass
    try:    ##ANSWERING DO YOU... HAVE TYPE OF QUESTIONS
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('country', question)
            x1 = re.search('here are you ', question)
            x2 = re.search('location', question)
            if(x!=None)|(x1!=None)|(x2!=None):
                try:
                    elem_txt = i.find_element(By.CSS_SELECTOR, 'textarea[type=text][aria-required=true]')
                    send_keysnojs(elem_txt, 'I am located in Hungary, Europe. ')
                except:
                    pass
                try:
                    elem_txt = i.find_element(By.CSS_SELECTOR, 'input[type=text][aria-required=true]')
                    send_keysnojs(elem_txt, 'I am located in Hungary, Europe. ')
                except:
                    pass
                break
    except:
        pass
    try:
        ##DESCRIBE YOUR EXPERIENCE... WHAT IS YOUR EXPERIENCE??
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('your experience', question)
            if(x!=None):
                elem_txt = i.find_element(By.CSS_SELECTOR, 'textarea[type=text][aria-required=true]')
                if job_type == 'copywriter':
                    send_keysnojs(elem_txt, 'I am located in Hungary, Europe. ')
                if job_type == 'technical_writer':
                    send_keysnojs(elem_txt, 'I am located in Hungary, Europe. ')
                break
    except:
        pass
    try:    ##ANSWERING DO YOU... HAVE TYPE OF QUESTIONS
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q: 
            question = i.text
            x = re.search('Do you', question) 
            x1 = re.search('Are you', question)
            x2 = re.search('Have you', question)
            x4 = re.search('ponsorship', question)
            if((x!=None)|(x1!=None)|(x2!=None))&(x4==None):
                try:
                    elem_txt = i.find_element(By.CSS_SELECTOR, 'textarea[type=text][aria-required=true]')
                    send_keysnojs(elem_txt, 'Yes. ')
                    break
                except:
                    pass
            else:
                try:
                    elem_txt = i.find_element(By.CSS_SELECTOR, 'textarea[type=text][aria-required=true]')
                    send_keysnojs(elem_txt, 'No. ')
                    break
                except:
                    pass
                
    except:
        pass
    try:
        ##ADDING THE STUPID SUMMARY QUESTION IF IT'S EVEN EVER NECESSARY??!!!!
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('Summary', question)
            if(x!=None):
                elem_txt = i.find_element(By.CSS_SELECTOR, 'textarea[id=summary][aria-required=true]') 
                send_keysnojs(elem_txt, "I believe I have skills and experience that are suitable for this position. I have several years of experience in this position as can be attested on my resume. Additionally my work samples which I have attached to this application, I believe, attest to my experience. I also believe that what helps me stand out from other applicants is that your needs will always come first in everything I do.\nI have a passion for tailoring my writing in a manner that is unique, creative, informative and well formulated, so as to give you that extra push that will take your organization to the next level. I am always seeking a role that helps me hone my writing skills, and therefore I believe that this role fits me perfectly.\nI'm looking forward to hearing from you if I am considered a potential applicant. Thank you for your consideration.")
                break
    except:
        pass
    try:
        ##ANSWERING HOW DID YOU HEAR ABOUT US??!!! VERRY COMPLEX ALWAYS DEAL AND FINISH WITH EVERY ELEMENT FIRST IN A NESTED LOOP!!
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('How did you hear about', question)
            if(x!=None):
                inp_box = i.find_element(By.TAG_NAME, 'input')
                click_nojs(inp_box)
                elems = i.find_elements(By.TAG_NAME, 'li')
                for x in elems:
                    source = x.text
                    y = re.search('ocial Media', source) ## Selecting social media
                    if (y!=None):
                        click_nojs(x)
                        break
    except:
        pass
    try:   ##WHERE DID YOU FIND THIS JOB? TEXT FORM
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('here did you ', question)
            if(x!=None):
                elem_txt = i.find_element(By.CSS_SELECTOR, 'textarea[type=text][aria-required=true]')
                send_keysnojs(elem_txt, 'I found this job on a Workable job advert. ')
                break
    except:
        pass
    try:
        ##CLICKING THE YES CHECKBOX
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('Are you', question) 
            x1 = re.search('Do you', question)
            x2 = re.search('sponsorship',question.casefold())
            if((x!=None)|(x1!=None))&(x2==None): 
                try:
                    yes_btn = i.find_element(By.CSS_SELECTOR, 'input[value=true][type=radio]')
                    click_nojs(yes_btn)
                except:
                    pass
            else:
                try:
                    yes_btn = i.find_element(By.CSS_SELECTOR, 'input[value=false][type=radio]') ## NOt sure about this!
                    click_nojs(yes_btn)
                except:
                    pass
                break
    except:
        pass
    try:   ##ACCEPTING THE SALARY!!!!
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('compensation', question.casefold())  ##compensations
            x1 = re.search('salary', question.casefold()) ##salary
            x2 = re.search('CTC', question) ##salary
            if(x!=None)|(x1!=None)|(x2!=None):
                elem_txt = i.find_element(By.CSS_SELECTOR, 'input[type=text][aria-required=true]')
                send_keysnojs(elem_txt, 'I am willing to accept your salary proposal Thanks :)')
                value = str(elem_txt.get_attribute("value"))
                z = len(re.findall(r'\w+', value))
                if (z==0)|(value==""):
                    elem_txt.clear()
                    send_keysnojs(elem_txt, '700')
                    break
    except:
        pass
    try:    ##WHAT IS YOUR NOTICE PERIOD?
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('otice', question)  ##notice
            x1 = re.search('availability', question)
           # x1 = re.search('eriod ', question) ##period
            if(x!=None)|(x1!=None):
                elem_txt = i.find_element(By.CSS_SELECTOR, 'input[type=text][aria-required=true]')
                send_keysnojs(elem_txt, 'I am willing to start this job immediately. I will also dedicate myself full time to this job. Thanks :). ')
                break
    except:
        pass
    try:      ##HOW DO YOU ENSURE THAT YOUR COPY IS...
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            txt1 = "I ensure that a copy is aligned with a brand's voice by defining the brand's voice and tone, choosing the right words and tone, and using a consistent style and format in my writing. Additionally, I regularly review, update, and improve my content to make sure that it is relevant to the latest market trends."
            x = re.search('ow do you ensure that', question)  ##HOW DO YOU ENSURE THAT YOUR COPY IS... 
            if(x!=None):
                try:
                    elem_txt = i.find_element(By.CSS_SELECTOR, 'input[type=text][aria-required=true]')
                    if job_type=="copywriter":
                        send_keysnojs(elem_txt, txt1)
                except:
                    pass
                try:
                    elem_txt = i.find_element(By.CSS_SELECTOR, 'textarea[type=text][aria-required=true]')
                    if job_type=="copywriter":
                        send_keysnojs(elem_txt, txt1)
                except:
                    pass
                break
    except:
        pass
    try:       ###WHY DO YOU STAND OUT??!!!
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('stand out', question)  ##compensations 
            if(x!=None):
                txt1 = "I believe I have skills and experience that are suitable for this position. I have several years of experience in this position as can be attested on my resume. Additionally my work samples which I have attached to this application, I believe, attest to my experience. I also believe that what helps me stand out is that your needs always come first in everything I do. I have a passion for tailoring my writing in a manner that is unique, creative, informative and well formulated, so as to give you that extra push that will take your organization to the next level."
                try:
                    elem_txt = i.find_element(By.CSS_SELECTOR, 'input[type=text][aria-required=true]')
                    send_keysnojs(elem_txt, txt1)
                except:
                    pass
                try:
                    elem_txt = i.find_element(By.CSS_SELECTOR, 'textarea[type=text][aria-required=true]')
                    send_keysnojs(elem_txt, txt1)
                except:
                    pass
                break
    except:
        pass
    ## FILLING 'WILL YOU REQUIRE SPONSORSHIP?'
    try:
        elems = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in elems:
            elem_txt = i.text
            x = re.search('ponsorship', elem_txt) ##sponsorship
            if(x!=None):
                try:
                    no_button = i.find_element(By.CSS_SELECTOR, 'input[type=radio][value=No]') 
                    click_nojs(no_button)
                except:
                    pass
                try:
                    elem_txt = i.find_element(By.CSS_SELECTOR, 'textarea[type=text]')
                    send_keysnojs(elem_txt, 'No. ')
                except:
                    elem_txt = i.find_element(By.CSS_SELECTOR, 'input[type=text]')
                    send_keysnojs(elem_txt, 'No. ')
                break
    except:
        pass
    try:  ##Clicking terms and conditions
        terms = driver.find_element(By.CSS_SELECTOR, 'input[name=gdpr][type=checkbox]')
        click_nojs(terms)
    except:
        pass
    try: ##How many years of experience do you have??
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            x = re.search('ears', question) ##Years
            x1 = re.search('experience', question)
            if(x!=None) & (x1!=None):
                try:
                    elem_txt = i.find_element(By.CSS_SELECTOR, 'input[type=text][aria-required=true]')
                    send_keysnojs(elem_txt, '6')
                except:
                    pass
                try: ## Clicking answers which have checkboxes
                    elems = i.find_elements(By.TAG_NAME, 'label')
                    for y in elems:
                        txt = y.text
                        z = re.search('5', txt)
                        if (z!=None):
                            inpt_selct = y.find_element(By.CSS_SELECTOR, 'input[type=radio]')
                            click_nojs(inpt_selct)
                except:
                    pass
                break
    except:
        pass
        ###FILLING THE USELESS ARE YOU QUESTIONS... MUST ALWAYS PUT THIS BEFORE SUBMIT##MUST BE SECOND LAST!!!
    try:
        custom_q = driver.find_elements(By.CLASS_NAME, 'styles__input-group--3aPac')
        for i in custom_q:
            question = i.text
            if(question!=""):
                try:
                    elem = i.find_element(By.CSS_SELECTOR, 'input[aria-required=true][value=true][type=radio]')
                    click_nojs(elem)
                except:
                    pass
                break
    except:
        pass
    try: 
        ### FINALLY CLICKING SUBMIT BUTTON
        apply_btn = driver.find_element(By.CSS_SELECTOR, 'button[data-ui=application-form-submit]')
        click_nojs(apply_btn)
    except:
        pass
    ##CHECKING JOB APPLICATION SUCCESS
    try:
        x = wait.until(EC.element_to_be_clickable(driver.find_element(By.CLASS_NAME, 'successTitle__container--3us8H')))
        success = x.text
        y = re.search('thank you', success.casefold())
        if y!=None:
            print('Workable job application was successful')
    except:
        pass




%%%%%%%

def test_click(element):
    #driver.execute_script("arguments[0].scrollIntoView(true);",element)
    actionChains.move_to_element(element).perform()
    driver.execute_script("arguments[0].click();", wait.until(EC.element_to_be_clickable(element)))
    print('I clicked')
def newclick2(element):  ##With a shorter wait time for checkboxes
    try:
        #driver.execute_script("arguments[0].scrollIntoView(true);",element)
        try:
            actionChains.move_to_element(element).perform()
        except:
            pass
        driver.execute_script("arguments[0].click();", wait1.until(EC.element_to_be_clickable(element)))
        print('I clicked')
    except:
        print("I didn't click")
        pass
def click_nojs(element):
    try:
        actionChains.move_to_element(element).perform()
        element.click()  
    except:
        pass
def sending_keysjs(element, keys):
    print('Start of send_keysjs Function')
    try:
        actionChains.move_to_element(element).perform()
    except:
        pass
        print('Moving to the element was not successful')
    try:
        driver.execute_script("arguments[0].click();", wait.until(EC.element_to_be_clickable(element)))
        element.clear()
    except: 
        pass
        print('Waiting for the element to be clickable was not successful')
    driver.execute_script('arguments[0].value = "' + (keys) + '";', wait.until(EC.element_to_be_clickable(element)))
    print('Finally sent keys successfully')
def send_keysnojs(element, keys):
    print('Start of send_keysnojs Function')
    try:
        actionChains.move_to_element(element).perform()
    except:
        pass
        print('Moving to the element was not successful')
    try:
        elem = wait.until(EC.element_to_be_clickable(element)) 
        elem.clear()
    except:
        pass
        print('Waiting for the element to be clickable was not successful')
    #time.sleep(0.5)
    try:
        element.send_keys(keys)
        print('Finally sent keys successfully')
    except:
        pass
            
def send_keysall(element, keys):
    print('Start of send_keysall Function :Sending keys via NO JS!!')
    send_keysnojs(element, keys)
    txt = element.get_attribute('value')
    if (txt == "")|(txt == None):
        print('The text box attribute"value" was empty so sending keys via JS!!')
        sending_keysjs(element, keys)
        
def newclick (element): 
    try:
        #driver.execute_script("arguments[0].scrollIntoView(true);",element)
        actionChains.move_to_element(element).perform()
        driver.execute_script("arguments[0].click();", wait.until(EC.element_to_be_clickable(element)))
        print('I clicked Newclick()')
    except:
        print("I didn't click Newclick()")
        pass
def checkbox_click(element):
    txt,txt1,txt2,txt3 = "","","",""
    click_nojs(element)
    txt = str(element.is_selected())
    c1 = "".join(["I have got txt",txt])
    print(c1)
    try:
        txt1 = str(element.get_attribute('checked'))
        c1 = "".join(["I have got txt1",txt1])
        print(c1)
    except:
        pass
    try:
        txt2 = str(father1.get_attribute('aria-checked')) 
        c1 = "".join(["I have got txt2",txt2])
        print(c1)
    except:
        pass
    try:
        txt3 = str(grandfather1.get_attribute('aria-checked'))
        c1 = "".join(["I have got txt3",txt3])
        print(c1)
    except:
        pass
    if ((txt!='True')|(txt1!='true'))&((txt1!='true')|(txt2!='true')|(txt1!='True')|(txt2!='True')):
        newclick2 (element)   
        #click_nojs(element)
        print('Im now on the 2nd stage')
$$$

def input_type(elem):
    wf, wf1, wf3 = 0, 0, 0 
    if elem_type == 'checkboxes':
        print('Function: input_type = checkboxes')
        search_send_input(elem)
    if elem_type == 'buttons':
        print('Function: input_type = buttons')
        buttons_input(elem)
    if (elem_type=='names')|(elem_type=='ul_elems'):
        print('Function: input_type = names')
        names_input(elem)
    return wf, wf1, wf3
#####
def buttons_input(element):
    global wf,res_submited 
    rounds,wf,res_submited = 0,0,""
    if (status=="end")|(status1=="end"):
        while 1:            
            y = re.search('attach',search_txt.casefold()) ##adding resume
            y1 = re.search('cv',search_txt.casefold())
            y2 = re.search('resume',search_txt.casefold())
            #print(search_txt)
            if (y!=None)|(y1!=None)|(y2!=None):
                z = len(re.findall(r'\w+', search_txt))
                if z>35:
                    print('There are too may words. More than 30. This must be wrong\n')
                    break
                print(' I have found the word attach, cv or resume\nThe run_action is: '+run_action)
                wf+=1
                if (run_action=='Yes'):
                    print('I found the cv and I am now attaching it')
                    send_keysnojs(element, resume_path) 
                    time.sleep(2)
                    elem_storage()
                    res_submited = "Yes"
                    break  
            y = re.search('submit',search_txt.casefold()) ##adding resume
            #y1 = re.search('apply',search_txt.casefold())  
            #y2 = re.search('resume',search_txt.casefold())
            #print(search_txt)
            if (y!=None):#|(y1!=None)|(y2!=None):
                z = len(re.findall(r'\w+', search_txt))
                if z>35:
                    print('There are too may words. More than 30. This must be wrong\n')
                    break
                print('I have found the word submit\n')
                wf+=1
                if (run_action=='Yes'):
                    print('I have now submtted the resume for the 1st time')  
                    send_keysnojs(element, resume_path) 
                    time.sleep(2)
                    elem_storage()
                    break   
            y = re.search('apply',search_txt.casefold())
            if status1=="end":
                print('We are clicking Apply on the 1st page to access other input fields')
                click_nojs(element)
                break
            if (y!=None):#|(y1!=None)|(y2!=None):                
                z = len(re.findall(r'\w+', search_txt)) 
                print('I have found the word apply\n')
                wf+=1 
                if (res_submited!="Yes")&(run_action=='Yes'):
                    print('I have now submtted the resume because it had not been submitted before')  
                    send_keysnojs(element, resume_path) 
                    time.sleep(2)
                    elem_storage()
                    break
            print("".join(["The wf for buttons function is: ",str(wf),"\n"]))  
            break
    while 1:
        y = re.search('photo',search_txt.casefold())  
        #y2 = re.search('resume',search_txt.casefold())
        #print(search_txt)
        if (y!=None):#|(y1!=None)|(y2!=None):      
            print('I have found the word photo\n')
            wf+=1 
            if (run_action=='Yes'):
                print('I have now added my photo')  
                send_keysnojs(element, photo_path) 
                time.sleep(2)
                elem_storage()
                try:  ###Trying to find if there is an upload button  ###WILL DEAL WITH THIS LATER!!
                    time.sleep(3)
                    button1 = driver.find_elements(By.TAG_NAME,'button')
                    for i in button1:
                        txt = i.text
                        z = re.search('upload',txt.casefold())
                        if (z!=None):
                            click_nojs(i)
                            break
                except:
                    pass                    
                break
        break
    return wf
########

def search_send_input(element):  ##SEARCHING FOR KEYWORDS FROM FATHER, GRANDFATHER & GREATFATHER(WHICH ARE GLOBAL ELEMENTS)
    global wf1 
    rounds,wf1 = 0,0
    while 1:
        y = re.search('gender',search_txt.casefold()) ##I AM A MALE!!
        y1 = re.search('transgender',search_txt.casefold())
        if (y!=None)&(y1==None): 
            wf1+=1
            #print(search_txt)
            z = re.search('male',search_txt1.casefold())
            z1 = re.search('female',search_txt1.casefold()) 
            print("".join(["I have found gender and the run_action is: ",run_action])) 
            if (z!=None)&(z1==None)&(run_action=='Yes'): 
                checkbox_click(element)
                elem_storage()
                print("I found the subsearch and I clicked on it successfully\n")
                print(len(stored_elems))
                #print(search_txt1)
                break
        y1 = re.search('transgender',search_txt.casefold()) ##I AM NOT TRANSGENDER. NEVER!!!
        if (y1!=None):  
            wf1+=1
            z = re.search('no',search_txt1.casefold())
            z1 = re.search('answer',search_txt1.casefold()) 
            print("".join(["I have found transgender and the run_action is: ",run_action]))
            print(run_action)
            if (z!=None)&(z1==None)&(run_action=='Yes'):
                checkbox_click(element)
                elem_storage()
                print("I found the subsearch and I clicked on it successfully\n")
                break
        y = re.search('race',search_txt.casefold()) ##I AM BLACK... VERY BLACK!!
        y1 = re.search('ethnic',search_txt.casefold())
        if (y!=None)|(y1!=None):
            wf1+=1
            z = re.search('black',search_txt1.casefold()) 
            print("".join(["I found race and the run_action is: ",run_action]))
            if (z!=None)&(run_action=='Yes'):  
                checkbox_click(element)
                elem_storage()
                print('I found the subsearch and I clicked on it successfully\n')
                break
        y = re.search('veteran',search_txt.casefold()) ##I AM NOT A VETERAN. WHY SHOULD I GO TO WAR??!!
        if (y!=None):  
            wf1+=1
            z = re.search('not',search_txt1.casefold())
            z1 = re.search('no',search_txt1.casefold()) 
            print("".join(["I found veteran and the run_action is: ",run_action]))
            if ((z!=None)|(z1!=None))&(run_action=='Yes'):
                checkbox_click(element)
                elem_storage()
                print('I found the subsearch and I clicked on it successfully\n')
                break
        y = re.search('disability',search_txt.casefold()) ##FILLING WHETHER I HAVE ANY DISABILITY
        if (y!=None):  
            wf1+=1
            z = re.search('not',search_txt1.casefold())
            z1 = re.search('no',search_txt1.casefold()) 
            print("".join(["I found disability and the run_action is: ",run_action]))
            if ((z!=None)|(z1!=None))&(run_action=='Yes'):
                checkbox_click(element)
                elem_storage()
                print('I found the subsearch and I clicked on it successfully\n')
                break
        y = re.search('age ',search_txt.casefold()) ##FILLING WHETHER I HAVE ANY DISABILITY
        if (y!=None):
            wf1+=1
            z = re.search('21',search_txt1)
            z1 = re.search('-2',search_txt1)
            print(search_txt1) 
            print("".join(["I found age and the run_action is: ",run_action]))
            if (z!=None)&(z1!=None)&(run_action=='Yes'):
                checkbox_click(element)
                elem_storage()
                print('I found the subsearch and I clicked on it successfully\n')
                break
        break
    return wf1
#########
def def_search_txt(element):
    if elem_type=='checkboxes':
        adva_search = "Yes"
    else:
        adva_search = "No"
    print("".join(["Started search elem type is ",elem_type]))
    global rounds,search_txt,search_txt1,run_action,greatfather1,greatfather1_txt,greatfather2,greatfather2_txt,greatfather3,greatfather3_txt,greatfather4,greatfather4_txt
    greatfather1_txt,greatfather2_txt,greatfather3_txt,greatfather4_txt,run_action,search_txt,search_txt1,not_found,rounds = "","","","","","","","",0
    while 1:
        if (elem_type=='buttons')|(elem_type=='names'):
            if (child_txt!="")&(adva_search!='Yes'):
                print('\nWe are now in part 0(child) of the search algorithm')
                search_txt = child_txt
                print('0. child_txt found')
                print(father_txt)
                run_action = 'No'
                input_type(element)
                if ((elem_type=='buttons')&(wf==1))|((elem_type=='names')&(wf3==1)):
                    search_txt = child_txt ##After searching child -> there is one key word found ---> search_txt = child_txt
                    print('0. We find keyword in child -- now sending input')
                    run_action = 'Yes'
                    input_type(element)
                    break
                if ((elem_type=='buttons')&(wf>1))|((elem_type=='names')&(wf3>1)):
                    print('0. There were more than one keyword found in child so we are breaking the loop')
                    break ### We break the loop because multiple words found -> child --> unusual 
            elif (father_txt!="")&(adva_search!='Yes'):
                print('\nWe are now in part 1 (father) of the search algorithm')
                search_txt = father_txt
                print('1. father found')
                print(father_txt)
                run_action = 'No'
                input_type(element)
                if ((elem_type=='buttons')&(wf==1))|((elem_type=='names')&(wf3==1)):
                    search_txt = father_txt ##After searching father -> there is one key word found ---> search_txt = father
                    print('1. We find keyword in father -- now sending input')
                    run_action = 'Yes'
                    input_type(element)
                    break
                if ((elem_type=='buttons')&(wf>1))|((elem_type=='names')&(wf3>1)):
                    print('1. There were more than one keyword found in father so we are breaking the loop')
                    break ### We break the loop because multiple words found -> father --> unusual 
            elif (grandfather_txt!="")&(adva_search!='Yes'): #&((rounds==0)|(rounds==1)):
                print('\nWe are now in part 2 (grandfather) of the search algorithm')
                search_txt = grandfather_txt
                run_action = 'No'
                input_type(element)
                if ((elem_type=='buttons')&(wf==1))|((elem_type=='names')&(wf3==1)):
                    print('2. We find keyword in grandfather -- now sending input')
                    search_txt = grandfather_txt ##After searching grandfather -> there is one key word found ---> search_txt = grandfather
                    run_action = 'Yes'
                    input_type(element)
                    break
                if ((elem_type=='buttons')&(wf>1))|((elem_type=='names')&(wf3>1)):
                    print('2. There were more than one keyword found in grandfather so we are breaking the loop')
                    break ### We break the loop because no word found in father -> multiple found -> grandfather --> unusual

            elif ((greatfather_txt!="")&(adva_search!='Yes')): ## WILL CHECK WHETHER I NEED ROUNDS
                print('\nWe are now in part 3 (greatfather) of the search algorithm')
                search_txt = greatfather_txt ##If after searching grandfather there is noo keyword ---> search_txt = greatfather
                run_action = 'No'
                input_type(element)
                if ((elem_type=='buttons')&(wf==1))|((elem_type=='names')&(wf3==1)):
                    print('3. We find keyword in greatfather -- now sending input')
                    search_txt = greatfather_txt ##After searching greatfather -> there is one key word found ---> search_txt = grandfather
                    run_action = 'Yes'
                    input_type(element)
                    break
                if ((elem_type=='buttons')&(wf>1))|((elem_type=='names')&(wf3>1)):
                    print('3. There were more than one keyword found in greatfather so we are breaking the loop')
                    break ### We break the loop because no word found in grandather -> multiple found -> greatfather --> unusual
            try:
                greatfather1 = greatfather.find_element(By.XPATH, '..')
                print('\nWe are now in part 4 (greatfather) of the search algorithm')
            except:
                break
            greatfather1_txt = greatfather1.text
            search_txt = greatfather1_txt ##If after searching greatfather1 there is noo keyword ---> search_txt = greatfather2
            z = len(re.findall(r'\w+', search_txt))
            if z>15:
                print('There are too may words in greatfather1. More than 30. This must be wrong\n')
                break
                
            if ((greatfather1_txt!="")&(adva_search!='Yes')):
                run_action = 'No'
                input_type(element)
                if ((elem_type=='buttons')&(wf==1))|((elem_type=='names')&(wf3==1)):
                    print('4. We find keyword in greatfather1 -- now sending input')
                    search_txt = greatfather1_txt ##After searching greatfather1 -> there is one key word found ---> search_txt = greatfather1
                    run_action = 'Yes'
                    input_type(element)
                    break
                if ((elem_type=='buttons')&(wf>1))|((elem_type=='names')&(wf3>1)):
                    print('4. There were more than one keyword found in greatfather1 so we are breaking the loop')
                    break ### We break the loop because no word found in greatfather -> multiple found -> greatfather1 --> unusual

            try:
                greatfather2 = greatfather1.find_element(By.XPATH, '..')
                print('\nWe are now in part 5 (greatfather2) of the search algorithm')
            except:
                break
            greatfather2_txt = greatfather2.text
            search_txt = greatfather2_txt ##If after searching greatfather1 there is noo keyword ---> search_txt = greatfather2
                            
            z = len(re.findall(r'\w+', search_txt))
            if z>35:
                print('There are too may words in greatfather2. More than 30. This must be wrong\n')
                break
            if ((greatfather2_txt!="")&(adva_search!='Yes')):
                run_action = 'No'
                input_type(element)
                if ((elem_type=='buttons')&(wf==1))|((elem_type=='names')&(wf3==1)):
                    print('5. We find keyword in greatfather2 -- now sending input')
                    search_txt = greatfather2_txt ##After searching greatfather2 -> there is one key word found ---> search_txt = greatfather2
                    run_action = 'Yes'
                    input_type(element)
                    break
                if ((elem_type=='buttons')&(wf>1))|((elem_type=='names')&(wf3>1)):
                    print('5. There were more than one keyword found in greatfather2 so we are breaking the loop')
                    break ### We break the loop because no word found in greatfather1 -> multiple found -> greatfather2 --> unusual

            try:
                greatfather3 = greatfather2.find_element(By.XPATH, '..')
                print('\nWe are now in part 6 (greatfather3) of the search algorithm')
            except:
                break
            greatfather3_txt = greatfather3.text
            search_txt = greatfather3_txt ##If after searching greatfather1 there is noo keyword ---> search_txt = greatfather2
            
            z = len(re.findall(r'\w+', search_txt))
            if z>35:
                print('There are too may words in greatfather3. More than 30. This must be wrong\n')
                break
                
            if ((greatfather3_txt!="")&(adva_search!='Yes')):
                run_action = 'No'
                input_type(element)
                if ((elem_type=='buttons')&(wf==1))|((elem_type=='names')&(wf3==1)):
                    print('6. We find keyword in greatfather3 -- now sending input')
                    search_txt = greatfather3_txt ##After searching greatfather1 -> there is one key word found ---> search_txt = greatfather1
                    run_action = 'Yes'
                    input_type(element)
                    break
                if ((elem_type=='buttons')&(wf>1))|((elem_type=='names')&(wf3>1)):
                    print('6. There were more than one keyword found in greatfather3 so we are breaking the loop')
                    break ### We break the loop because no word found in greatfather2 -> multiple found -> greatfather3 --> unusual

            try:
                greatfather4 = greatfather3.find_element(By.XPATH, '..')
                print('\nWe are now in part 7 (greatfather4) of the search algorithm')
            except:
                break
            greatfather4_txt = greatfather4.text
            search_txt = greatfather4_txt ##If after searching greatfather4 there is noo keyword ---> search_txt = greatfather4
            z = len(re.findall(r'\w+', search_txt))
            if z>35:
                print('There are too may words in greatfather4. More than 30. This must be wrong\n')
                break
                
            if ((greatfather4_txt!="")&(adva_search!='Yes')):
                run_action = 'No'
                input_type(element)
                if ((elem_type=='buttons')&(wf==1))|((elem_type=='names')&(wf3==1)):
                    print('7. We find keyword in greatfather4 -- now sending input')
                    search_txt = greatfather4_txt ##After searching greatfather4 -> there is one key word found ---> search_txt = greatfather4
                    run_action = 'Yes'
                    input_type(element)
                    break
                if ((elem_type=='buttons')&(wf>1))|((elem_type=='names')&(wf3>1)):
                    print('7. There were more than one keyword found in greatfather4 so we are breaking the loop')
                    break ### We break the loop because no word found in greatfather3 -> multiple found -> greatfather4 --> unusual
        break     
        
###THIS IS NOW THE END OF THE GREATT!! SEARCH ALGORITHM FOR BUTTONS AND INPUT TYPE BOXES!!!
        
        ##NOW DEALING WITH ANOTHER CATEGORY Dealing with checkboxes           ##CHECKBOXES!!
    if (rounds==0)&(adva_search=='Yes'): #Will continue from here!!
        while 1:
            search_txt = grandfather_txt
            search_txt1 = father_txt
            print('23')
            run_action = 'No'
            search_send_input(element)
            if (wf1>1): ##Because of gender and transgender!
                search_txt = father_txt
                search_txt1 = child_txt
                print('24')
                run_action = 'Yes'
                search_send_input(element)
                break
            elif (wf1==1):  ##Because of gender and transgender!
                print('25')
                run_action = 'Yes'
                search_send_input(element)
                break
            elif (wf1==0):    ##Lets change the search parameters if now words found in first parameter
                search_txt = greatfather_txt
                if (father_txt!=""):
                    search_txt1 = father_txt
                else:
                    search_txt1 = grandfather_txt
                print('26')
                run_action = 'No'
                search_send_input(element)
                if (wf1==1):
                    print('We find keyword in greatfather -- now sending input')
                    run_action = 'Yes'
                    search_send_input(element)
                if (wf1>1):
                    print('There was more than one element found in greatfather so we are breaking the loop!!')
                    break
                if (wf1==0):
                    greatfather1 = greatfather.find_element(By.XPATH, '..')
                    greatfather1_txt = greatfather1.text
                    search_txt = greatfather1_txt 
                    if (father_txt!=""):
                        search_txt1 = father_txt
                    elif (grandfather_txt!=""):
                        search_txt1 = grandfather_txt
                    else:
                        search_txt1 = greatfather_txt
                    print('We did not find keyword in greatfather. We are now searching greatfather1')
                    run_action = 'No'
                    search_send_input(element)
                    if (wf1==1):
                        print('We find keyword in greatfather1 -- now sending input')
                        run_action = 'Yes'
                        search_send_input(element)
                    if (wf1>1):
                        print('There was more than one element found in greatfather1 so we are breaking the loop!!')
                        break
                    if (wf1==0):
                        try:
                            greatfather2 = greatfather1.find_element(By.XPATH, '..')
                        except:
                            break
                        greatfather2_txt = greatfather2.text
                        search_txt = greatfather2_txt 
                        if (father_txt!=""):
                            search_txt1 = father_txt
                        elif (grandfather_txt!=""):
                            search_txt1 = grandfather_txt
                        elif(greatfather_txt!=""):
                            search_txt1 = greatfather_txt
                        else:
                            search_txt1 = greatfather1_txt
                        print('We did not find keyword in greatfather1. We are now searching greatfather2')
                        run_action = 'No'
                        search_send_input(element)
                        if (wf1==1):
                            print('We find keyword in greatfather2 -- now sending input')
                            run_action = 'Yes'
                            search_send_input(element)
                        if (wf1>1):
                            print('There was more than one element found in greatfather2 so we are breaking the loop!!')
                            break
                        if (wf1==0):
                            greatfather3 = greatfather1.find_element(By.XPATH, '..')
                            greatfather3_txt = greatfather3.text
                            search_txt = greatfather3_txt 
                            if (father_txt!=""):
                                search_txt1 = father_txt
                            elif (grandfather_txt!=""):
                                search_txt1 = grandfather_txt
                            elif(greatfather_txt!=""):
                                search_txt1 = greatfather_txt
                            elif(greatfather1!=""):
                                search_txt1 = greatfather1_txt
                            else:
                                search_txt1 = greatfather3_txt
                            print('We did not find keyword in greatfather2. We are now searching greatfather3')
                            run_action = 'No'
                            search_send_input(element)
                            if (wf1==1):
                                print('We find keyword in greatfather3 -- now sending input')
                                run_action = 'Yes'
                                search_send_input(element)
                            if (wf1>1):
                                print('There was more than one element found in greatfather3 so we are breaking the loop!!')
                                break
                            if (wf1==0):
                                print("THAT'S IT MAN!!! I'VE HAD IT. I am not searching past greatfather3. Am I a donkey?!!ANIMAL RIGHTS!!!")
                                #run_action = 'No'
                                #search_send_input(element)
            break
            
            ### creating new category for "UL (list)" elements
    if elem_type=='ul_elems':
        while 1:
            #click_nojs(element) ##We clicked on the element so that the li elements can be visible    
            if (father_txt!="")&(bool(re.search('[a-zA-Z]',father_txt))==True):
                search_txt = father_txt  
                print("".join(["father ul text found. father_txt is:\n",father_txt]))
                print(father_txt)
                run_action = 'Yes'
                input_type(element)
                break
            elif (grandfather_txt!="")&(bool(re.search('[a-zA-Z]',grandfather_txt))==True):
                search_txt = grandfather_txt
                print("".join(["grandfather ul text found. grandfather_txt is:\n",grandfather_txt]))
                run_action = 'Yes'
                input_type(element)
                break
            elif (greatfather_txt!="")&(bool(re.search('[a-zA-Z]',greatfather_txt))==True): 
                print("".join(["greatfather ul text found. greatfather_txt is:\n",greatfather_txt]))
                search_txt = greatfather_txt
                run_action = 'Yes' ##Should we run the click/input action? 
                input_type(element)
                break
            print('ul_elems We are now finding elements greater than greatfather')
            try:
                greatfather1 = greatfather.find_element(By.XPATH, '..')
            except:
                break
            greatfather1_txt = greatfather1.text
            if (greatfather1_txt!="")&(bool(re.search('[a-zA-Z]',greatfather1_txt))==True): 
                print("".join(["greatfather1 ul text found. greatfather1_txt is:\n",greatfather1_txt]))
                search_txt = greatfather1_txt
                run_action = 'Yes' ##Should we run the click/input action? 
                input_type(element)
                break
            try:
                greatfather2 = greatfather1.find_element(By.XPATH, '..')
            except:
                break
            greatfather2_txt = greatfather2.text
            if (greatfather2_txt!="")&(bool(re.search('[a-zA-Z]',greatfather2_txt))==True): 
                print("".join(["greatfather2 ul text found. greatfather2_txt is:\n",greatfather2_txt]))
                search_txt = greatfather2_txt
                run_action = 'Yes' ##Should we run the click/input action? 
                input_type(element)
                break
            try:
                greatfather3 = greatfather2.find_element(By.XPATH, '..')
            except:
                break
            greatfather3_txt = greatfather3.text
            if (greatfather3_txt!="")&(bool(re.search('[a-zA-Z]',greatfather3_txt))==True):  
                print("".join(["greatfather3 ul text found. greatfather3_txt is:\n",greatfather3_txt]))
                search_txt = greatfather3_txt
                run_action = 'Yes' ##Should we run the click/input action? 
                input_type(element)
                break
            try:
                greatfather4 = greatfather3.find_element(By.XPATH, '..')
            except:
                break
            greatfather4_txt = greatfather4.text
            if (greatfather4_txt!="")&(bool(re.search('[a-zA-Z]',greatfather4_txt))==True): 
                print("".join(["greatfather4 ul text found. greatfather4_txt is:\n",greatfather4_txt]))
                search_txt = greatfather4_txt
                run_action = 'Yes' ##Should we run the click/input action? 
                input_type(element)
                break   ###LEFT AT GREATFATHER4. THIS IS FAR ENOUGH..
            break
          
################


def applications_start():
    global final_links1,resume_path,photo_path
    resume_path = "C:\\Users\\Laingo\\Documents\\Temp Word Documents\\RESUMES\\Content writing\\Technical Writer CV.pdf"
    photo_path = "C:\\Users\\Laingo\\Downloads\\me.jpg"
    final_links1,initial_links = [],[]
    def running_link_and_clicking_show_more_jobs(): 
        driver.get("https://bestwriting.com/jobs")
        x=1
        while x<5:
            elements = driver.find_elements(By.TAG_NAME, "button")
            for i in elements:
                elem_text = i.text
                print (elem_text)
                if elem_text == "Show more jobs":
                    newclick(i)
                    time.sleep(4)
                    break
            x+=1
        elements = driver.find_elements(By.TAG_NAME, "a")
        for i in elements:
            attribute = str(i.get_attribute("href"))
            initial_links.append(str(attribute))
        for i in initial_links:
            print (i)
        print (len(initial_links))
    running_link_and_clicking_show_more_jobs()
    
    def sorting_links():
        res = []
        for x in initial_links:  
            y = re.search('http', x) #sorting the link
            y1 = re.search('bestwriting.com', x)
            y2 = re.search('linked', x)
            y3 = re.search('facebook', x)
            y4 = re.search('twitter', x)
            y5 = re.search('wellfound', x)
            y6 = re.search('indeed', x)
            if(y!=None)&(y1==None)&(y2==None)&(y3==None)&(y4==None)&(y5==None)&(y6==None):
                res.append(str(x))  
        print (len(res))
        #removing duplicates in final_links   
        for x in res:
            [final_links1.append(x) for x in res if x not in final_links1]   
        
        #CHECKING IF ALREADY APPLIED        
        def storing_final_links():
            links_x = []
            for i in final_links1:
                if i not in content5:
                    links_x.append(i)
            final_links1 = links_x
        storing_final_links()
                
        print (len(final_links1))
        for i in final_links1:
            print (i)
    sorting_links()

###########

def getting_txts(elems):
    global child_txt,father_txt,grandfather_txt,greatfather_txt,greatfather,grandfather,father,final_elem,stored_elems
    child_txt,res_submited,wf3,ul_country,loop = "","No",0,"united state",""
    stored_elems = []
    wf,wf1,wf3 = 0,0,0
    stored_elems.clear()
    print('I have cleared all the stored elems!!')
    for i in elems: 
        if (loop=="break"):
            break      ##WE BREAK BECAUSE OF ONSITE AND HYBRID JOBS               
        if i not in stored_elems:  ##CHECKING IF ELEMENT WAS ALREADY SORTED!!
            print('1@\n')
            child_txt = str(i.text)
            #print("".join(["The child txt is : ",child_txt])) ## Was trying to get input elem txt which I found was NULL
            father = i.find_element(By.XPATH, '..')
            father_txt = str(father.text)    ##GETTING FATHER TEXT
            #print("".join(["The father txt is : ",father_txt]))
            grandfather = father.find_element(By.XPATH, '..')
            grandfather_txt = str(grandfather.text)    ##GETTING GRANDFATHER TEXT
            #print("".join(["The grandfather txt is : ",grandfather_txt]))
            greatfather = grandfather.find_element(By.XPATH, '..')
            greatfather_txt = str(greatfather.text)   ##GETTING GREAT GRANDFATHER TEXT!!
            final_elem = i
            print('The length of stored_elems is: '+str(len(stored_elems)))
            def_search_txt(final_elem)

def first_page_search(url):
    global status1
    status1 = ""
    w = 0
    driver.get(url)
    job_dts = driver.find_element(By.TAG_NAME, 'body').text
    y = re.search('name', job_dts.casefold())
    if y!=None:
        w+=1
    y = re.search('email', job_dts.casefold())
    if y!=None:
        w+=1
    y = re.search('phone', job_dts.casefold())
    if y!=None:
        w+=1
    y = re.search('address', job_dts.casefold())
    if y!=None:
        w+=1
    y = re.search('resume', job_dts.casefold())
    if y!=None:
        w+=1
    if (w<=1):   # We now find the apply btn
        print('This is not the usual 1st apply page. Searching for btn')
        elems_array = driver.find_elements(By.TAG_NAME, 'button')
        method = "By.TAG_NAME, 'button'"
        status1 = "end"
        elem_type = 'buttons'
        getting_txts(elems_array)
        status1 = ""
    print("".join(["End of first page search. Word(usual 1st page application words) found is: ",w]))
            
def final_stage(url):  ###WILL HAVE TO DEAL WITH THIS PART OF CODE!!    
    global elem_type,status,method
    method,elem_type,status = "","",""
    
    print('Started with: input:not([type=file]):not([type=button]):not([type=checkbox])')
    elems_array = driver.find_elements(By.CSS_SELECTOR, 'input:not([type=file]):not([type=button]):not([type=checkbox])') ##ALL INPUTS BUT NO FILES!!
    elem_type = 'names'
    method = "By.CSS_SELECTOR, 'input'"
    getting_txts(elems_array) 
    print('Started with: input[type=radio]')
    elems_array = driver.find_elements(By.CSS_SELECTOR, 'input[type=radio]')
    elem_type = 'checkboxes'
    method = "By.CSS_SELECTOR, 'input[type=radio]'"
    getting_txts(elems_array)
    print('Started with: ul elems')
    elems_array = driver.find_elements(By.TAG_NAME, 'ul')
    elem_type = 'ul_elems'
    method = "By.TAG_NAME, 'ul'"
    getting_txts(elems_array)
    print('Started with: select elems')
    elems_array = driver.find_elements(By.TAG_NAME, 'select')
    elem_type = 'ul_elems' ##Elem type is ul_elems even though we are looking for select items
    method = "By.TAG_NAME, 'select'"
    getting_txts(elems_array)
    print('Started with: input[type=file] to find resumes')
    elems_array = driver.find_elements(By.CSS_SELECTOR, 'input[type=file]')
    elem_type = 'buttons'
    method = "By.CSS_SELECTOR, 'input[type=file]'"   
    getting_txts(elems_array)
    print('Started with: checkboxes')
    print('Started with: buttons')
    elems_array = driver.find_elements(By.TAG_NAME, 'button')
    method = "By.TAG_NAME, 'button'"
    elem_type = 'buttons'
    getting_txts(elems_array)
    elems_array = driver.find_elements(By.CSS_SELECTOR, 'input[type=checkbox]')
    elem_type = 'checkboxes'
    method = "By.CSS_SELECTOR, 'input[type=checkbox]'"
    getting_txts(elems_array)
    
    status = "end"
    print('status is end')
    print('Started with: input[type=file] to find resumes')
    elems_array = driver.find_elements(By.CSS_SELECTOR, 'input[type=file]')
    elem_type = 'buttons'
    method = "By.CSS_SELECTOR, 'input[type=file]'"   
    getting_txts(elems_array)
    print('Started with: buttons')
    elems_array = driver.find_elements(By.TAG_NAME, 'button')
    method = "By.TAG_NAME, 'button'"
    elem_type = 'buttons'
    getting_txts(elems_array) 
    print('Started with: [contenteditable=true]')
    elems_array = driver.find_elements(By.CSS_SELECTOR, '[contenteditable=true]')
    elem_type = 'buttons'
    method = "By.CSS_SELECTOR, '[contenteditable=true]'"
    getting_txts(elems_array)     
    print('Finally finished all algorithmic applications')
#final_stage()

################
elem_txt = driver.find_element(By.XPATH, '//*[@id="2910892831591698"]/div/div[2]/div/div/div[1]/div/div/div/form/section[3]/div[2]/div[3]/label/div/div/input')
value = str(elem_txt.get_attribute("value"))
print(value)
z = len(re.findall(r'\w+', value))
print(z)
if (z==0)|(value==""):
    elem_txt.clear()
    send_keysnojs(elem_txt, '500')
elem_txt.clear()
send_keysnojs(elem_txt, '500')
################


def sorting_out_links():
    global final_links
    res = []
    for x in initial_links: #splitting the link after the 'y' mark to get a more accurate link
        y = x.split('?')[0]
        try:
            x = re.search('/allas/', y) #sorting the link
            if(x!=None):
                res.append(str(y))
        except:            
            pass   
    print (len(res))
    #removing duplicates in final_links
    final_links = []        
    for x in res:
        [final_links.append(x) for x in res if x not in final_links]
    print (len(final_links))    
    storing_final_links() #let's now store the final sorted out & duplicate removed links
    for i in final_links:
        print (i)       

